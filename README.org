#+TITLE: Ultra96v2 Acceleration Base

* Overview
Simple project to allow developing accelerated applications on
Ultra96v2 using Vitis Acceleration and PetaLinux.

: Todos
: vadd to test vio access with accelerator
: sstate build
: rebuild from vivado all the way through platform
: test vadd with new hardware
: qemu boot
: qemu dev tree
: check that lab4 training document for sd card manifest file mods required

* Environment

:  edit the bin/setup.sh script to suit
:  source the bin/setup.sh script to configure environment
:   psource to source all tool settings
:   pa pop all dirs off directory stack
:   pws cd to project root directory

* Vivado Project

:  bin/gen-vivado-project.sh
:   uses ultra96v2-accel-base-bd.tcl

:  install board files
:  VIO LEDs
:  JTAG to AXI
:  VIO PL Reset

:  set_property pfm_name {vendor:boardid:name:rev} [current_project]
:  see output of validate_platform -verbose to see fields
:  or use list_property_value and list_property commands

:  Needed to generate output products in OOC in order to get
:  write_hw_platform command to complete sucessfully

:  'name' fields in the xsa appear to be set by the file name given for
:  xsa file

:  break out pfm interface set_parameters to an external function
:  install ultra96v2 board files

:  separate bd tcl and platform related commands - then easier to
:  change the hardware design

* PetaLinux Project

:  disable 96boards-sensors arduino-tools issue

:  build sd card img file for rufus
:  wifi credentials
:  wifi autostart
:  XILINX_XRT set to /usr
:  sstate for faster builds
:  remove extra files jffs cpio etc
:   IMAGE_FSTYPES_forcevariable in build/conf/plnxtool.conf for example
:  fsck.fat32
:   IMAGE_INSTALL_append = " dosfstools"
:  shared downloads dir

* Vitis Project

:  Install board files for u96
:  v++ options
:   debug, profile, interactive, config, save temps,

: I want a scripted flow here, but not sure that Makefile makes any
: sense. For the host application, it seems reasonable, but for the
: kernels not so much. Well, I guess it's not that bad. Could make the
: entire project Makefile based or cmake based...
